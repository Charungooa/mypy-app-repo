name: Dev CI/CD Pipeline

on:
  push:
    branches:
      - dev

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    steps:
      #
      # 1) Checkout the main app repository
      #
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      #
      # 2) Log in to Azure CLI (Service Principal)
      #
      - name: Azure CLI Login
        run: |
          az login --service-principal \
            -u "${{ secrets.AZURE_CLIENT_ID }}" \
            -p "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --tenant "${{ secrets.AZURE_TENANT_ID }}"

      #
      # 3) Log in to ACR (both Docker + CLI)
      #
      - name: Log in to Azure Container Registry
        run: |
          echo "${{ secrets.ACR_DEV_PASSWORD }}" | docker login terraacr2025dev.azurecr.io \
            -u "${{ secrets.ACR_DEV_USERNAME }}" --password-stdin
          az acr login --name terraacr2025dev

      #
      # 4) Debug step: Show all tags in ACR before filtering
      #
      - name: Debug - Show ACR tags
        run: |
          echo "=== All tags for 'myapp' in ACR (unfiltered) ==="
          az acr repository show-tags --name terraacr2025dev \
            --repository myapp \
            --orderby time_desc \
            --output table

      #
      # 5) Determine version type (major, minor, patch)
      #
      - name: Determine Version Type
        id: version_type
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}  # Use the custom GitHub token for authentication
        run: |
          VERSION_TYPE="patch"  # Default

          # Fetch PR labels using GitHub API (GH CLI)
          PR_LABELS=$(gh pr view ${{ github.event.pull_request.number }} --json labels -q '.labels[].name' || echo "")

          echo "Detected PR Labels: $PR_LABELS"

          # Check PR labels for versioning
          if echo "$PR_LABELS" | grep -q "major"; then
            VERSION_TYPE="major"
          elif echo "$PR_LABELS" | grep -q "minor"; then
            VERSION_TYPE="minor"
          fi

          # Check commit messages if no PR labels were found
          if [[ "$VERSION_TYPE" == "patch" ]]; then
            COMMIT_MSG=$(git log -1 --pretty=%B)

            if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]]; then
              VERSION_TYPE="major"
            elif [[ "$COMMIT_MSG" == *"feat:"* ]]; then
              VERSION_TYPE="minor"
            fi
          fi

          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          echo "Version Type: $VERSION_TYPE"

      #
      # 6) Fetch latest tag from ACR and increment version accordingly
      #
      - name: Fetch latest tag from ACR and increment version
        id: versioning
        run: |
          echo "=== Fetching latest vX.Y.Z tag ==="
          LATEST_TAG=$(az acr repository show-tags --name terraacr2025dev \
                       --repository myapp \
                       --orderby time_desc \
                       --output tsv \
                       | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' \
                       | head -n 1)

          echo "Latest tag from ACR: $LATEST_TAG"
          [[ -z "$LATEST_TAG" ]] && LATEST_TAG="v0.0.0"

          echo "=== Debugging regex parsing ==="
          MAJOR=$(echo "$LATEST_TAG" | awk -F. '{print substr($1,2)}')
          MINOR=$(echo "$LATEST_TAG" | awk -F. '{print $2}')
          PATCH=$(echo "$LATEST_TAG" | awk -F. '{print $3}')

          echo "Extracted version components: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          # Increment based on determined version type
          if [[ "$VERSION_TYPE" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "$VERSION_TYPE" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          IMAGE_TAG="v${MAJOR}.${MINOR}.${PATCH}"

          echo "NEW image tag (after increment) = $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      #
      # 7) Build and push Docker image using new IMAGE_TAG
      #
      - name: Build and push Docker image
        run: |
          echo "Using IMAGE_TAG=$IMAGE_TAG"
          docker build -t terraacr2025dev.azurecr.io/myapp:$IMAGE_TAG .
          docker push terraacr2025dev.azurecr.io/myapp:$IMAGE_TAG

      #
      # 8) Clone Flux GitOps repository (Ensure correct branch)
      #
      - name: Clone Flux GitOps repository
        run: |
          git clone --branch main --single-branch \
            https://x-access-token:${{ secrets.GH_PAT }}@github.com/charungooa/flux-gitops02.git \
            flux-repo

      #
      # 9) Debug: Show deployment.yaml before/after sed (Fixed `sed` syntax)
      #
      - name: Debug sed
        run: |
          cd flux-repo
          echo "=== BEFORE SED: dev/deployment.yaml ==="
          cat dev/deployment.yaml

          echo "=== Running sed to update image tag ==="
          sed -i "s|^\(\s*image:\s*\)terraacr2025dev.azurecr.io/myapp:.*|\1terraacr2025dev.azurecr.io/myapp:$IMAGE_TAG|" dev/deployment.yaml

          echo "=== AFTER SED: dev/deployment.yaml ==="
          cat dev/deployment.yaml

          echo "=== GIT DIFF ==="
          git diff dev/deployment.yaml

      #
      # 10) Commit and push updated image version to Flux GitOps repository
      #
      - name: Commit and push updated image version to Flux GitOps repository
        run: |
          cd flux-repo
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"

          git add dev/deployment.yaml
          git commit -m "Updated image to $IMAGE_TAG" || echo "No changes to commit."
          git push \
            https://x-access-token:${{ secrets.GH_PAT }}@github.com/charungooa/flux-gitops02.git \
            || echo "No changes to push."