name: Prod Build and Deploy

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Azure CLI Login
        run: |
          az login --service-principal \
            -u "${{ secrets.AZURE_CLIENT_ID }}" \
            -p "${{ secrets.AZURE_CLIENT_SECRET }}" \
            --tenant "${{ secrets.AZURE_TENANT_ID }}"

      - name: Log in to Azure Container Registry (Prod)
        run: |
          echo "${{ secrets.ACR_PROD_PASSWORD }}" | docker login terraacr2025prod.azurecr.io \
            -u "${{ secrets.ACR_PROD_USERNAME }}" --password-stdin
          az acr login --name terraacr2025prod
    
      - name: Ensure Repository Exists & Fetch Latest Tag
        id: versioning
        run: |
          echo "=== Checking if repository 'myapp' exists in ACR ==="
          if ! az acr repository show --name terraacr2025prod --repository myapp >/dev/null 2>&1; then
            echo "Repository 'myapp' does not exist. Creating it with a placeholder image."
            docker build -t terraacr2025prod.azurecr.io/myapp:v0.0.1 .
            docker push terraacr2025prod.azurecr.io/myapp:v0.0.1
          fi

          echo "=== Fetching all tags from Prod ACR ==="
          az acr repository show-tags --name terraacr2025prod --repository myapp --orderby time_desc --output table

          echo "=== Fetching latest vX.Y.Z tag ==="
          LATEST_TAG=$(az acr repository show-tags --name terraacr2025prod \
                      --repository myapp \
                      --orderby time_desc \
                      --output tsv \
                      | awk '/^v[0-9]+\.[0-9]+\.[0-9]+$/ {print; exit}')

          echo "Latest tag from ACR: $LATEST_TAG"

          [[ -z "$LATEST_TAG" ]] && LATEST_TAG="v0.0.0"

          echo "=== Debugging tag parsing ==="
          echo "RAW LATEST_TAG = $LATEST_TAG"

          MAJOR=$(echo "$LATEST_TAG" | awk -F. '{print substr($1,2)}')
          MINOR=$(echo "$LATEST_TAG" | awk -F. '{print $2}')
          PATCH=$(echo "$LATEST_TAG" | awk -F. '{print $3}')

          echo "Extracted version components: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          # Increment PATCH version
          NEW_PATCH=$((PATCH + 1))
          IMAGE_TAG="v${MAJOR}.${MINOR}.${NEW_PATCH}"

          echo "NEW image tag (after increment) = $IMAGE_TAG"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
    
      - name: Build and Push Docker Image to Prod ACR
        run: |
          echo "Using IMAGE_TAG=$IMAGE_TAG"
          docker build -t terraacr2025prod.azurecr.io/myapp:$IMAGE_TAG .
          docker push terraacr2025prod.azurecr.io/myapp:$IMAGE_TAG

      - name: Update FluxCD GitOps Repository (Debugging)
        run: |
          git clone --branch main --single-branch \
            https://x-access-token:${{ secrets.GH_PAT }}@github.com/charungooa/flux-gitops02.git \
            flux-repo

          cd flux-repo

          echo "=== BEFORE SED: prod/deployment.yaml ==="
          cat prod/deployment.yaml

          echo "=== Running sed to update image tag ==="
          sed -i "s|^\(\s*image:\s*\)terraacr2025prod.azurecr.io/myapp:.*|\1terraacr2025prod.azurecr.io/myapp:$IMAGE_TAG|" prod/deployment.yaml

          echo "=== AFTER SED: prod/deployment.yaml ==="
          cat prod/deployment.yaml

          echo "=== GIT DIFF ==="
          git diff prod/deployment.yaml

          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add prod/deployment.yaml
          git commit -m "Updated image to $IMAGE_TAG" || echo "No changes to commit."
          git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/charungooa/flux-gitops02.git || echo "No changes to push."